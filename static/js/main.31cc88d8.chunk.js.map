{"version":3,"sources":["layers.ts","osm-selectors.ts","drawing.ts","overpass-requests.ts","api.ts","map.tsx","index.tsx"],"names":["addLayer","map","type","paint","id","source","filter","undefined","colours","isRedRoad","feature","p","properties","highway","maxspeed","isOrangeRoad","cycleway","isGreenRoad","bicycle","removeStreetLayers","console","log","removeLayer","removeSource","e","addStreetLayers","geoJson","addSource","data","features","safeCycleways","boundsStr","getOSMData","overpassQuery","a","options","hostname","port","path","method","headers","Promise","resolve","reject","req","http","res","body","setEncoding","on","chunk","statusCode","jsonResponse","JSON","parse","message","write","URLSearchParams","toString","end","debouncedFetchAndDrawMarkers","debounce","markers","setLoadingStatus","bounds","getBounds","southernLat","getSouth","westLong","getWest","northLat","getNorth","eastLong","getEast","join","safeRoutesOverpassQuery","safeRoutes","osmtogeojson","Map","mapContainer","React","useRef","mapRef","useState","loadingStatus","lng","setLng","lat","setLat","zoom","setZoom","useEffect","current","mapboxgl","container","center","hash","style","firstSymbolId","layers","getStyle","layer","tiles","minzoom","maxzoom","mapOnLoad","addControl","NavigationControl","FullscreenControl","MapboxGeocoder","accessToken","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","getCenter","getZoom","statusText","loading","success","ready_to_load","too_zoomed_out","unknownerror","className","color","target","rel","href","ref","App","Fragment","render","document","getElementById"],"mappings":"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","file":"static/js/main.31cc88d8.chunk.js","sourcesContent":["// TODO: Find the layer of the road labels for the maptiler background\nconst layerToAddAfter = undefined;\n// const layerToAddAfter = 'greenRoadsId'; //undefined;\n\nfunction addLayer(\n  map: mapboxgl.Map,\n  type:\n    | \"Driving\"\n    | \"Parking\"\n    | \"Sidewalk\"\n    | \"Shoulder\"\n    | \"Biking\"\n    | \"Bus\"\n    | \"SharedLeftTurn\"\n    | \"Construction\"\n    | \"LightRail\"\n    | \"Footway\"\n    | \"SharedUse\",\n  paint: any // TODO: fix this. used to be mapboxgl.FillPaint | undefined\n): void {\n  map.addLayer({\n    id: type,\n    type: \"fill\",\n    source: \"osm2streets-vector-tileserver\",\n    \"source-layer\": \"lanePolygons\",\n    paint,\n    filter: [\"==\", \"type\", type],\n    // filter: [\"==\", \"$type\", \"Polygon\"],\n  }, layerToAddAfter);\n}\n\nconst colours = {\n  laneMarking: \"white\",\n  intersection: \"#666666\",\n\n  // Derived from\n  // https://github.com/a-b-street/osm2streets/blob/5b40c7af877d4314ca7e45c5ac35ec472845c6ca/street-explorer/www/js/layers.js#L55\n  Driving: \"grey\",\n  // Driving: \"black\",\n  Parking: \"#333333\",\n  Sidewalk: \"#CCCCCC\",\n  Shoulder: \"#CCCCCC\",\n  Biking: \"#0F7D4B\",\n  Bus: \"#BE4A4C\",\n  SharedLeftTurn: \"black\",\n  Construction: \"#FF6D00\",\n  LightRail: \"#844204\",\n  \"Buffer(Planters)\": \"#555555\",\n\n  Footway: \"#DDDDE8\",\n  SharedUse: \"#E5E1BB\",\n};\n\nexport const mapOnLoad = (map: mapboxgl.Map) => () => {\n  const layers = map.getStyle().layers;\n  // Find the index of the first symbol layer in the map style.\n  let firstSymbolId;\n  for (const layer of layers) {\n    if (layer.type === \"symbol\") {\n      firstSymbolId = layer.id;\n      break;\n    }\n  }\n  console.log({ firstSymbolId });\n\n  console.log(\n    \"Adding sources. If you don't seen anything check vector server logs.\"\n  );\n\n  // https://docs.mapbox.com/mapbox-gl-js/example/multiple-geometries/\n  // Add a new vector tile source with ID 'mapillary'.\n  map.addSource(\"osm2streets-vector-tileserver\", {\n    type: \"vector\",\n    tiles: [\"https://api.safecyclingmap.com/tile/{z}/{x}/{y}\"],\n    // tiles: [\"http://localhost:3000/tile/{z}/{x}/{y}\"],\n    \n    minzoom: 17,\n    maxzoom: 19,\n  });\n\n  // addLayer(map, \"LightRail\", {\n  //   \"fill-color\": \"yellow\",\n  //   \"fill-opacity\": 0.2,\n  // });\n\n  // map.addLayer({\n  //   id: \"geometry\",\n  //   type: \"fill\",\n\n  //   source: \"osm2streets-vector-tileserver\",\n  //   \"source-layer\": \"geometry\",\n  //   paint: {\n  //     // To improve!\n  //     \"fill-color\": colours.Driving,\n  //     \"fill-opacity\": 0.4,\n  //   },\n  //   filter: [\"==\", \"$type\", \"Polygon\"],\n  // });\n\n  // map.addLayer({\n  //   id: \"lanePolygons\",\n  //   type: \"fill\",\n\n  //   source: \"osm2streets-vector-tileserver\",\n  //   \"source-layer\": \"lanePolygons\",\n  //   paint: {\n  //     \"fill-color\": colours.Driving,\n  //     \"fill-opacity\": 1,\n  //   },\n  //   filter: [\"==\", \"$type\", \"Polygon\"],\n  // });\n\n  // addLayer(map, \"Biking\", {\n  //   \"fill-color\": colours.Biking,\n  //   \"fill-opacity\": 1,\n  // });\n\n\n  addLayer(map, \"SharedUse\", {\n    \"fill-color\": \"blue\",\n    \"fill-opacity\": 0.3,\n  });\n  addLayer(map, \"Shoulder\", {\n    \"fill-color\": colours.Shoulder,\n    \"fill-opacity\": 0.5,\n  });\n  addLayer(map, \"Sidewalk\", {\n    \"fill-color\": colours.Sidewalk,\n    \"fill-opacity\": 0.9,\n  });\n  // Currently on the wrong side of ways??\n  addLayer(map, \"Footway\", {\n    \"fill-color\": colours.Footway,\n    \"fill-opacity\": 0.9,\n  });\n  addLayer(map, \"Driving\", {\n    \"fill-color\": colours.Driving,\n    \"fill-opacity\": 0.9,\n  });\n\n  addLayer(map, \"Bus\", {\n    \"fill-color\": colours.Bus,\n    \"fill-opacity\": 0.9,\n  });\n  addLayer(map, \"Construction\", {\n    \"fill-color\": colours.Construction,\n    \"fill-opacity\": 0.5,\n  });\n\n  map.addLayer({\n    id: \"intersection\",\n    type: \"fill\",\n\n    source: \"osm2streets-vector-tileserver\",\n    \"source-layer\": \"geometry\",\n    paint: {\n      \"fill-color\": colours.intersection,\n      \"fill-opacity\": 1,\n    },\n    /*\n    along with `type`, other attributes we could use here are:\n    - control\": \"Signed\" | \"Signalled\" | \"Uncontrolled\"\n    */\n    filter: [\"==\", \"type\", \"intersection\"],\n  }, layerToAddAfter);\n\n  // // Currently on the wrong side of ways??\n  // addLayer(map, \"Parking\", {\n  //   \"fill-color\": 'yellow',\n  //   \"fill-opacity\": 0.9,\n  // });\n\n  map.addLayer({\n    id: \"Biking\",\n    type: \"fill\",\n    source: \"osm2streets-vector-tileserver\",\n    \"source-layer\": \"lanePolygons\",\n    paint: {\n      \"fill-color\": colours.Biking,\n      \"fill-opacity\": 1,\n    },\n    filter: [\"==\", \"type\", \"Biking\"],\n    // filter: [\"==\", \"type\", \"Biking\"],\n  }, layerToAddAfter);\n\n  map.addLayer({\n    id: \"intersectionMarkings\",\n    type: \"fill\",\n\n    source: \"osm2streets-vector-tileserver\",\n    \"source-layer\": \"intersectionMarkings\",\n    paint: {\n      \"fill-color\": colours.Driving,\n      \"fill-opacity\": 0.8,\n    },\n    filter: [\"==\", \"$type\", \"Polygon\"],\n  }, layerToAddAfter);\n\n  map.addLayer({\n    id: \"laneMarkings\",\n    type: \"fill\",\n\n    source: \"osm2streets-vector-tileserver\",\n    \"source-layer\": \"laneMarkings\",\n    paint: {\n      \"fill-color\": colours.laneMarking,\n      \"fill-opacity\": 1,\n    },\n    filter: [\"==\", \"$type\", \"Polygon\"],\n  }, layerToAddAfter);\n\n  ///////////////\n\n\n\n};","import { Geometry, GeoJsonProperties, Feature } from 'geojson';\n\n/**\n * Is a red (dangerous) road if:\n * - Speed is higher than 40kmh\n * - Road is a residental street with default speed limit (50kph)\n * @param feature \n * @returns \n */\nexport function isRedRoad(feature: Feature<Geometry, GeoJsonProperties>): boolean {\n  const p = feature.properties;\n  if (p === null) {\n    return false;\n  }\n  if(p.highway === 'primary' && p.maxspeed === undefined) {\n    return true;\n  }\n  if (p.maxspeed > 40) {\n    return true;\n  }\n  if (p.highway === 'residential' && p.maxspeed === undefined) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Is an orange (caution) road if:\n * - Road has a speed limit less than 40kph and greater than 30kmh\n * - Has an on road, painted (non-separated) bike lane\n * @param feature \n * @returns \n */\nexport function isOrangeRoad(feature: Feature<Geometry, GeoJsonProperties>): boolean {\n  const p = feature.properties;\n  if (p === null) {\n    return false;\n  }\n\n  if (p.maxspeed <= 40) {\n    return true;\n  }\n  if (p.cycleway === 'lane') {\n    return true;\n  }\n  return false;\n}\n\n\n/**\n * Is a green (safe) road if:\n * - Speed is less than or equal to 30kph\n * - Is a [living street](https://wiki.openstreetmap.org/wiki/Tag:highway%3Dliving_street)\n * - Is a separated cycleway\n * - Is a cycle lane separated from the road\n * - Is a shared path (bikes + pedestrians allowed)\n * @param feature \n * @returns \n */\nexport function isGreenRoad(feature: Feature<Geometry, GeoJsonProperties>): boolean {\n  const p = feature.properties;\n  if (p === null) {\n    return false;\n  }\n  if (p.maxspeed <= 30) {\n    return true;\n  }\n  if (p.highway === 'cycleway') {\n    return true;\n  }\n  if (p.highway === 'shared_lane') {\n    return true;\n  }\n  if (p.bicycle === 'designated' && p.highway === 'cycleway') {\n    return true;\n  }\n  if (p.highway === 'living_street') {\n    return true;\n  }\n  if (p.cycleway === 'track' || p['cycleway:left'] === 'track' || p['cycleway:right'] === 'track') {\n    return true;\n  }\n  return false\n}","import mapboxgl from \"mapbox-gl\";\nimport {\n  RawOverpassNode,\n} from \"./interfaces\";\n\nimport { FeatureCollection, Geometry, GeoJsonProperties, Feature, GeometryObject } from 'geojson';\nimport { isGreenRoad, isOrangeRoad, isRedRoad } from \"./osm-selectors\";\n\nexport function drawMarkerAndCard(\n  item: RawOverpassNode,\n  map: mapboxgl.Map\n): mapboxgl.Marker {\n  const { lat, lon } = item;\n\n  let markerOptions: mapboxgl.MarkerOptions = {};\n  markerOptions.color = \"gray\";\n\n  const defaultScale = 0.5;\n  markerOptions.scale = defaultScale;\n\n  if (item.tags && item.tags.capacity !== undefined) {\n    const capacity = parseInt(item.tags.capacity);\n    console.log({ capacity });\n    let possibleScale = defaultScale + capacity / 30;\n    if (possibleScale > 2) {\n      possibleScale = 2;\n    }\n    markerOptions.scale = possibleScale;\n\n    if (item.tags && item.tags.covered === \"yes\") {\n      markerOptions.color = \"green\";\n    }\n    if (item.tags && item.tags.lit === \"yes\") {\n      markerOptions.color = \"yellow\";\n    }\n    if (item.tags && item.tags.bicycle_parking === \"shed\") {\n      markerOptions.color = \"#00ec18\";\n    }\n  }\n\n  const marker = new mapboxgl.Marker(markerOptions)\n    .setLngLat([lon, lat])\n    .addTo(map);\n\n  if (window.orientation !== undefined) {\n    marker.getElement().addEventListener(\"click\", (e) => {\n      map.flyTo({\n        center: [lon, lat],\n      });\n    });\n  }\n  return marker;\n}\n\nexport function removeMarkers(markers: mapboxgl.Marker[]): void {\n  markers.map((marker) => marker.remove());\n}\nexport function removeStreetLayers(map: mapboxgl.Map): void {\n  try {\n    console.log(\"Removing sources...\");\n    map.removeLayer('greenRoadsId');\n    map.removeLayer('redRoadsId');\n    map.removeLayer('orangeRoadsId');\n\n    map.removeSource('greenRoads');\n    map.removeSource('redRoads');\n    map.removeSource('orangeRoads');\n  } catch (e) {\n    console.log(\"not removing sources - at least one doesn't exist yet\");\n  }\n}\n\nexport function addStreetLayers(map: mapboxgl.Map, geoJson: FeatureCollection<Geometry, GeoJsonProperties>) {\n  /** Add below first vector layer */\n  const layerToAddBefore = 'SharedUse';\n  map.addSource('redRoads', {\n    type: 'geojson',\n    data: {\n      features: geoJson.features.filter(isRedRoad),\n      type: \"FeatureCollection\"\n    }\n  });\n  map.addSource('orangeRoads', {\n    type: 'geojson',\n    data: {\n      features: geoJson.features.filter(isOrangeRoad)\n      ,\n      type: \"FeatureCollection\"\n    }\n  });\n\n  map.addSource('greenRoads', {\n    type: 'geojson',\n    data: {\n      features: geoJson.features.filter(isGreenRoad)\n      ,\n      type: \"FeatureCollection\"\n    }\n  });\n\n\n\n  // Add a new layer to visualize the polygon.\n  map.addLayer({\n    'id': 'redRoadsId',\n    'type': 'line',\n    'source': 'redRoads', // reference the data source\n    'layout': {},\n    'paint': {\n      \"line-color\": \"red\",\n      \"line-width\": 3,\n      'line-opacity': 0.3\n    },\n  }, layerToAddBefore);\n\n  map.addLayer({\n    'id': 'orangeRoadsId',\n    'type': 'line',\n    'source': 'orangeRoads', // reference the data source\n    'layout': {},\n    'paint': {\n      \"line-color\": \"orange\",\n      \"line-width\": 3,\n      'line-opacity': 0.5\n    },\n  }, layerToAddBefore);\n\n\n  // Add a new layer to visualize the polygon.\n  map.addLayer({\n    'id': 'greenRoadsId',\n    'type': 'line',\n    'source': 'greenRoads', // reference the data source\n    'layout': {},\n    'paint': {\n      \"line-color\": \"#00FF00\",\n      \"line-width\": 7,\n      'line-opacity': 0.8\n    },\n  }, layerToAddBefore);\n\n}\n\nexport function drawMarkersAndCards(\n  map: mapboxgl.Map,\n  items: RawOverpassNode[]\n): mapboxgl.Marker[] {\n  const markers = items\n    .filter((item) => item.type === \"node\")\n    .map((node: RawOverpassNode) => {\n      return drawMarkerAndCard(node, map);\n    });\n\n  return markers;\n}\n","/** where boundsStr is in the format of `lat,lon,lat,lon` */\nexport const bicycleParking = (boundsStr: string) => `\n[out:json][timeout:25];\n(\n  // query part for: “bicycle_parking=*”\n  node[\"bicycle_parking\"](${boundsStr});\n  way[\"bicycle_parking\"](${boundsStr});\n  relation[\"bicycle_parking\"](${boundsStr});\n  // query part for: “amenity=bicycle_parking”\n  node[\"amenity\"=\"bicycle_parking\"](${boundsStr});\n  way[\"amenity\"=\"bicycle_parking\"](${boundsStr});\n  relation[\"amenity\"=\"bicycle_parking\"](${boundsStr});\n);\nout body;\n>;\nout skel qt;\n`\n\n/** where boundsStr is in the format of `lat,lon,lat,lon` */\nexport const safeCycleways = (boundsStr: string) => `\n[out:json][timeout:60][bbox:${boundsStr}]; \n\n/* Select road types to display */ \n\n( \n  way[highway];\n  way[\"highway\"=\"residential\"];\n  \n  way[highway=cycleway];\n  way[\"highway\"~\"cycleway|path|footway|pedestrian\"][\"bicycle\"~\"yes|designated\"];\n  way[highway=proposed][proposed=cycleway];\n  way[highway=construction][construction=cycleway];\n  way[proposed=cycleway];\n  way[cycleway=lane];\n  way[\"cycleway:left\"=track];\n  way[cycleway=track];\n\n);\n\n// print results \nout body; \n>; \nout skel qt; \n`","import debounce from \"debounce\";\nimport { LoadingStatusType, OverpassResponse} from \"./interfaces\";\n\nimport * as http from \"https\";\nimport { addStreetLayers, removeStreetLayers } from \"./drawing\";\nimport { safeCycleways } from \"./overpass-requests\";\n\nimport osmtogeojson from 'osmtogeojson';\n\n/**\n * Make request to Overpass Turbo.\n * @param overpassQuery Overpass turbo query string\n * @returns \n */\nexport async function getOSMData(overpassQuery: string): Promise<OverpassResponse> {\n  // overpass.kumi.systems\n    // hostname: \"overpass-api.de\",\n  const options = {\n    hostname: \"overpass.kumi.systems\",\n    port: 443,\n    path: \"/api/interpreter\",\n    method: \"POST\",\n    headers: {\n      // \"Content-Type\": \"application/json\",\n      'Content-Type': 'application/x-www-form-urlencoded'\n    },\n  };\n\n  return new Promise((resolve, reject) => {\n    var req = http.request(options, function (res) {\n      var body = \"\";\n      res.setEncoding(\"utf8\");\n      res.on(\"data\", (chunk) => (body += chunk));\n      res.on(\"end\", function () {\n        if (res.statusCode !== 200) {\n          console.log(\"error code\", res.statusCode);\n          reject(res.statusCode);\n        }\n\n        const jsonResponse = JSON.parse(body);\n        resolve(jsonResponse);\n      });\n    });\n    req.on(\"error\", function (e) {\n      reject(e.message);\n    });\n    req.write(new URLSearchParams({\n      'data': overpassQuery,\n    }).toString());\n    req.end();\n  });\n}\n\nexport const debouncedFetchAndDrawMarkers = debounce(fetchAndDrawMarkers, 2000);\n\nasync function fetchAndDrawMarkers(\n  map: mapboxgl.Map,\n  markers: React.MutableRefObject<mapboxgl.Marker[]>,\n  setLoadingStatus: React.Dispatch<React.SetStateAction<LoadingStatusType>>\n) {\n  setLoadingStatus(\"loading\");\n  const bounds = map.getBounds();\n  const southernLat = bounds.getSouth();\n  const westLong = bounds.getWest();\n  const northLat = bounds.getNorth();\n  const eastLong = bounds.getEast();\n\n  let safeRoutes: OverpassResponse;\n\n  const overpassBounds = [southernLat, westLong, northLat, eastLong];\n  const boundsStr = overpassBounds.join(\",\");\n  const safeRoutesOverpassQuery = safeCycleways(boundsStr);;\n\n  console.log(\"Started POST request...\");\n  try {\n    safeRoutes = await getOSMData(safeRoutesOverpassQuery);\n  } catch (e) {\n    console.log(\"Error:\", e);\n    setLoadingStatus(\"unknownerror\");\n    return;\n  }\n\n  const geoJson = osmtogeojson(safeRoutes, {})\n  console.log(geoJson);\n  console.log(\"Adding geojson to map...\");\n\n  removeStreetLayers(map);\n  addStreetLayers(map, geoJson);\n  \n  setLoadingStatus(\"success\");\n}\n","import React, { useEffect, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"./App.css\";\nimport { mapOnLoad } from \"./layers\";\n\n// @ts-ignore\nimport MapboxDirections from \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions\";\nimport \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css\";\n\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";\nimport { debouncedFetchAndDrawMarkers } from \"./api\";\nimport { LoadingStatusType } from \"./interfaces\";\n\nconst MAPBOX_TOKEN =\n  \"pk.eyJ1IjoiamFrZWMiLCJhIjoiY2tkaHplNGhjMDAyMDJybW4ybmRqbTBmMyJ9.AR_fnEuka8-cFb4Snp3upw\";\n\nconst min_overpass_turbo_zoom = 15;\n/** Also the min zoom of the vector tileserver */\n// const max_overpass_turbo_zoom = 15;\n\nmapboxgl.accessToken = MAPBOX_TOKEN;\nexport function Map() {\n  const mapContainer = React.useRef<HTMLDivElement>(null);\n  const mapRef = React.useRef<mapboxgl.Map | null>(null);\n  const markers = React.useRef<mapboxgl.Marker[]>([]);\n  const [loadingStatus, setLoadingStatus] =\n    useState<LoadingStatusType>(\"ready_to_load\");\n\n  const [lng, setLng] = useState(151.2160755932166);\n  const [lat, setLat] = useState(-33.88056647217827);\n  const [zoom, setZoom] = useState(17.504322191852786);\n\n  useEffect(() => {\n    // This is called on every pan\n    if (mapContainer.current === null) {\n      return;\n    }\n    if (mapRef.current !== null) {\n      return;\n    }\n\n    mapRef.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      center: [lng, lat],\n      zoom: zoom,\n      hash: true,\n      style: \"mapbox://styles/mapbox/dark-v11\",\n    });\n\n    const map = mapRef.current;\n    map.on(\"load\", mapOnLoad(map));\n\n    map.addControl(new mapboxgl.NavigationControl());\n    map.addControl(new mapboxgl.FullscreenControl());\n    map.addControl(\n      new MapboxGeocoder({\n        accessToken: mapboxgl.accessToken,\n        mapboxgl: mapboxgl,\n      }),\n      \"top-left\"\n    );\n    // map.addControl(\n    //   new MapboxDirections({\n    //     accessToken: mapboxgl.accessToken,\n    //   }),\n    //   \"top-left\"\n    // );\n    map.addControl(\n      new mapboxgl.GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true,\n        },\n        trackUserLocation: true,\n      })\n    );\n\n    map.on(\"move\", () => {\n      if (!map) {\n        return; // wait for map to initialize\n      }\n      const { lng, lat } = map.getCenter();\n      const zoom = map.getZoom();\n      if (zoom < min_overpass_turbo_zoom) {\n        setLoadingStatus(\"too_zoomed_out\");\n      } else {\n        setLoadingStatus(\"ready_to_load\");\n      }\n      console.log(lng, lat, zoom);\n\n      setLng(map.getCenter().lng);\n      setLat(map.getCenter().lat);\n      setZoom(map.getZoom());\n    });\n\n    if (map.getZoom() < min_overpass_turbo_zoom) {\n      setLoadingStatus(\"too_zoomed_out\");\n    } else {\n      console.log(`zoom is ${map.getZoom()}`);\n      debouncedFetchAndDrawMarkers(map, markers, setLoadingStatus);\n    }\n\n    map.on(\"moveend\", async () => {\n      if (map === null) {\n        return;\n      }\n      const zoom = map.getZoom();\n      if (zoom > min_overpass_turbo_zoom) {\n        console.log(`zoom is ${zoom}`);\n        debouncedFetchAndDrawMarkers(map, markers, setLoadingStatus);\n      }\n    });\n  });\n  const statusMessages = {\n    loading: \"Loading from OpenStreetMap...\",\n    success: \"Done loading\",\n    ready_to_load: \"About to load...\",\n    too_zoomed_out: \"Zoom in to see street safety\",\n    unknownerror: \"Error loading. Please wait a bit\",\n    \"429error\": \"Too many requests, please try in a bit\",\n  };\n\n  const statusText = statusMessages[loadingStatus];\n  return (\n    <div>\n      <div className=\"sidebar\">\n        <label>\n          <span color=\"red\">Warning:</span> Data is open source and not guaranteed to be\n          accurate.\n          <br></br>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/jakecoppinger/safe-cycling-map/blob/main/docs/key.md\"\n          >\n            View map key and how safety is calculated\n          </a>\n          <br></br>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/jakecoppinger/safe-cycling-map\"\n          >\n            About this map\n          </a>\n          <br></br>\n          {statusText}\n        </label>\n      </div>\n      <div ref={mapContainer} className=\"map-container\" />\n    </div>\n  );\n}\n","import { render } from 'react-dom';\nimport React, { FunctionComponent} from 'react';\nimport './index.css';\nimport { Map } from './map';\n\nconst App: FunctionComponent = () => {\n  return (\n    <React.Fragment>\n      <Map />\n    </React.Fragment>\n  );\n};\nrender(<App />, document.getElementById('root'));"],"sourceRoot":""}