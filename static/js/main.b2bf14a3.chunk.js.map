{"version":3,"sources":["layers.ts","map.tsx","index.tsx"],"names":["addLayer","map","type","paint","id","source","filter","undefined","colours","Map","mapContainer","React","useRef","mapRef","useState","lng","setLng","lat","setLat","zoom","setZoom","useEffect","current","mapboxgl","container","center","hash","style","version","sources","tiles","tileSize","attribution","layers","minzoom","maxzoom","on","firstSymbolId","getStyle","layer","console","log","addSource","mapOnLoad","addControl","NavigationControl","FullscreenControl","MapboxGeocoder","accessToken","MapboxDirections","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","getCenter","getZoom","className","target","rel","href","ref","App","Fragment","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2bf14a3.chunk.js","sourcesContent":["// TODO: Find the layer of the road labels for the maptiler background\nconst layerToAddAfter = undefined;\n\nfunction addLayer(\n  map: mapboxgl.Map,\n  type:\n    | \"Driving\"\n    | \"Parking\"\n    | \"Sidewalk\"\n    | \"Shoulder\"\n    | \"Biking\"\n    | \"Bus\"\n    | \"SharedLeftTurn\"\n    | \"Construction\"\n    | \"LightRail\"\n    | \"Footway\"\n    | \"SharedUse\",\n  paint: any // TODO: fix this. used to be mapboxgl.FillPaint | undefined\n): void {\n  map.addLayer({\n    id: type,\n    type: \"fill\",\n    source: \"osm2streets-vector-tileserver\",\n    \"source-layer\": \"lanePolygons\",\n    paint,\n    filter: [\"==\", \"type\", type],\n    // filter: [\"==\", \"$type\", \"Polygon\"],\n  }, layerToAddAfter);\n}\n\nconst colours = {\n  laneMarking: \"white\",\n  intersection: \"#666666\",\n\n  // Derived from\n  // https://github.com/a-b-street/osm2streets/blob/5b40c7af877d4314ca7e45c5ac35ec472845c6ca/street-explorer/www/js/layers.js#L55\n  Driving: \"grey\",\n  // Driving: \"black\",\n  Parking: \"#333333\",\n  Sidewalk: \"#CCCCCC\",\n  Shoulder: \"#CCCCCC\",\n  Biking: \"#0F7D4B\",\n  Bus: \"#BE4A4C\",\n  SharedLeftTurn: \"black\",\n  Construction: \"#FF6D00\",\n  LightRail: \"#844204\",\n  \"Buffer(Planters)\": \"#555555\",\n\n  Footway: \"#DDDDE8\",\n  SharedUse: \"#E5E1BB\",\n};\n\nexport const mapOnLoad = (map: mapboxgl.Map) => () => {\n  const layers = map.getStyle().layers;\n  // Find the index of the first symbol layer in the map style.\n  let firstSymbolId;\n  for (const layer of layers) {\n    if (layer.type === \"symbol\") {\n      firstSymbolId = layer.id;\n      break;\n    }\n  }\n  console.log({ firstSymbolId });\n\n  console.log(\n    \"Adding sources. If you don't seen anything check vector server logs.\"\n  );\n\n  // https://docs.mapbox.com/mapbox-gl-js/example/multiple-geometries/\n  // Add a new vector tile source with ID 'mapillary'.\n  map.addSource(\"osm2streets-vector-tileserver\", {\n    type: \"vector\",\n    tiles: [\"https://api.safecyclingmap.com/tile/{z}/{x}/{y}\"],\n    // tiles: [\"http://localhost:3000/tile/{z}/{x}/{y}\"],\n    \n    minzoom: 17,\n    maxzoom: 19,\n  });\n\n  // addLayer(map, \"LightRail\", {\n  //   \"fill-color\": \"yellow\",\n  //   \"fill-opacity\": 0.2,\n  // });\n\n  // map.addLayer({\n  //   id: \"geometry\",\n  //   type: \"fill\",\n\n  //   source: \"osm2streets-vector-tileserver\",\n  //   \"source-layer\": \"geometry\",\n  //   paint: {\n  //     // To improve!\n  //     \"fill-color\": colours.Driving,\n  //     \"fill-opacity\": 0.4,\n  //   },\n  //   filter: [\"==\", \"$type\", \"Polygon\"],\n  // });\n\n  // map.addLayer({\n  //   id: \"lanePolygons\",\n  //   type: \"fill\",\n\n  //   source: \"osm2streets-vector-tileserver\",\n  //   \"source-layer\": \"lanePolygons\",\n  //   paint: {\n  //     \"fill-color\": colours.Driving,\n  //     \"fill-opacity\": 1,\n  //   },\n  //   filter: [\"==\", \"$type\", \"Polygon\"],\n  // });\n\n  // addLayer(map, \"Biking\", {\n  //   \"fill-color\": colours.Biking,\n  //   \"fill-opacity\": 1,\n  // });\n\n\n  addLayer(map, \"SharedUse\", {\n    \"fill-color\": \"blue\",\n    \"fill-opacity\": 0.3,\n  });\n  addLayer(map, \"Shoulder\", {\n    \"fill-color\": colours.Shoulder,\n    \"fill-opacity\": 0.5,\n  });\n  addLayer(map, \"Sidewalk\", {\n    \"fill-color\": colours.Sidewalk,\n    \"fill-opacity\": 0.9,\n  });\n  // Currently on the wrong side of ways??\n  addLayer(map, \"Footway\", {\n    \"fill-color\": colours.Footway,\n    \"fill-opacity\": 0.9,\n  });\n  addLayer(map, \"Driving\", {\n    \"fill-color\": colours.Driving,\n    \"fill-opacity\": 0.9,\n  });\n\n  addLayer(map, \"Bus\", {\n    \"fill-color\": colours.Bus,\n    \"fill-opacity\": 0.9,\n  });\n  addLayer(map, \"Construction\", {\n    \"fill-color\": colours.Construction,\n    \"fill-opacity\": 0.5,\n  });\n\n  map.addLayer({\n    id: \"intersection\",\n    type: \"fill\",\n\n    source: \"osm2streets-vector-tileserver\",\n    \"source-layer\": \"geometry\",\n    paint: {\n      \"fill-color\": colours.intersection,\n      \"fill-opacity\": 1,\n    },\n    /*\n    along with `type`, other attributes we could use here are:\n    - control\": \"Signed\" | \"Signalled\" | \"Uncontrolled\"\n    */\n    filter: [\"==\", \"type\", \"intersection\"],\n  }, layerToAddAfter);\n\n  // // Currently on the wrong side of ways??\n  // addLayer(map, \"Parking\", {\n  //   \"fill-color\": 'yellow',\n  //   \"fill-opacity\": 0.9,\n  // });\n\n  map.addLayer({\n    id: \"Biking\",\n    type: \"fill\",\n    source: \"osm2streets-vector-tileserver\",\n    \"source-layer\": \"lanePolygons\",\n    paint: {\n      \"fill-color\": colours.Biking,\n      \"fill-opacity\": 1,\n    },\n    filter: [\"==\", \"type\", \"Biking\"],\n    // filter: [\"==\", \"type\", \"Biking\"],\n  }, layerToAddAfter);\n\n  map.addLayer({\n    id: \"intersectionMarkings\",\n    type: \"fill\",\n\n    source: \"osm2streets-vector-tileserver\",\n    \"source-layer\": \"intersectionMarkings\",\n    paint: {\n      \"fill-color\": colours.Driving,\n      \"fill-opacity\": 0.8,\n    },\n    filter: [\"==\", \"$type\", \"Polygon\"],\n  }, layerToAddAfter);\n\n  map.addLayer({\n    id: \"laneMarkings\",\n    type: \"fill\",\n\n    source: \"osm2streets-vector-tileserver\",\n    \"source-layer\": \"laneMarkings\",\n    paint: {\n      \"fill-color\": colours.laneMarking,\n      \"fill-opacity\": 1,\n    },\n    filter: [\"==\", \"$type\", \"Polygon\"],\n  }, layerToAddAfter);\n};","import React, { useEffect, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"./App.css\";\nimport { mapOnLoad } from \"./layers\";\n\n// @ts-ignore\nimport MapboxDirections from \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions\";\nimport \"@mapbox/mapbox-gl-directions/dist/mapbox-gl-directions.css\";\n\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";\n\nconst MAPBOX_TOKEN =\n  \"pk.eyJ1IjoiamFrZWMiLCJhIjoiY2tkaHplNGhjMDAyMDJybW4ybmRqbTBmMyJ9.AR_fnEuka8-cFb4Snp3upw\";\n\nmapboxgl.accessToken = MAPBOX_TOKEN;\nexport function Map() {\n  const mapContainer = React.useRef<HTMLDivElement>(null);\n  const mapRef = React.useRef<mapboxgl.Map | null>(null);\n\n  const [lng, setLng] = useState(151.2160755932166);\n  const [lat, setLat] = useState(-33.88056647217827);\n  const [zoom, setZoom] = useState(17.504322191852786);\n\n  useEffect(() => {\n    // This is called on every pan\n    if (mapContainer.current === null) {\n      return;\n    }\n    if (mapRef.current !== null) {\n      return;\n    }\n\n    mapRef.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      center: [lng, lat],\n      zoom: zoom,\n      hash: true,\n      style: {\n        version: 8,\n        sources: {\n          \"raster-tiles\": {\n            type: \"raster\",\n            tiles: [\n              \"https://a.tile-cyclosm.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png\",\n            ],\n            tileSize: 256,\n            attribution:\n              '© <a target=\"_blank\" href=\"https://www.cyclosm.org\">CyclOSM</a>, <a target=\"_blank\" href=\"https://github.com/a-b-street/osm2streets\">osm2streets</a>, <a target=\"_blank\" href=\"https://openstreetmap.org/\">OpenStreetMap contributors</a>',\n          },\n        },\n        layers: [\n          {\n            id: \"simple-tiles\",\n            type: \"raster\",\n            source: \"raster-tiles\",\n            minzoom: 0,\n            maxzoom: 22,\n          },\n        ],\n      },\n    });\n\n    const map = mapRef.current;\n    map.on(\"load\", mapOnLoad(map));\n\n    map.addControl(new mapboxgl.NavigationControl());\n    map.addControl(new mapboxgl.FullscreenControl());\n    map.addControl(\n      new MapboxGeocoder({\n        accessToken: mapboxgl.accessToken,\n        mapboxgl: mapboxgl,\n      }),\n      \"top-left\"\n    );\n    map.addControl(\n      new MapboxDirections({\n        accessToken: mapboxgl.accessToken,\n      }),\n      \"top-left\"\n    );\n    map.addControl(\n      new mapboxgl.GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true,\n        },\n        trackUserLocation: true,\n      })\n    );\n\n    map.on(\"move\", () => {\n      if (!map) {\n        return; // wait for map to initialize\n      }\n      const { lng, lat } = map.getCenter();\n      const zoom = map.getZoom();\n      console.log(lng, lat, zoom);\n\n      setLng(map.getCenter().lng);\n      setLat(map.getCenter().lat);\n      setZoom(map.getZoom());\n    });\n  });\n\n  return (\n    <div>\n      <div className=\"sidebar\">\n        <label>\n          A work in progress side project by{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://jakecoppinger.com/\"\n          >\n            Jake Coppinger\n          </a>{\" \"}\n          | Open source on{\" \"}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/jakecoppinger/safe-cycling-map\"\n          >\n            Github\n          </a>\n        </label>\n      </div>\n      <div ref={mapContainer} className=\"map-container\" />\n    </div>\n  );\n}\n","import { render } from 'react-dom';\nimport React, { FunctionComponent} from 'react';\nimport './index.css';\nimport { Map } from './map';\n\nconst App: FunctionComponent = () => {\n  return (\n    <React.Fragment>\n      <Map />\n    </React.Fragment>\n  );\n};\nrender(<App />, document.getElementById('root'));"],"sourceRoot":""}